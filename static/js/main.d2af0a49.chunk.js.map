{"version":3,"sources":["serviceWorker.ts","api/types.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/index.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/auth-reducer.ts","features/Auth/index.tsx","features/Auth/Login.tsx","features/Application/selectors.ts","features/Application/app-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","title","setTitle","error","setError","addItemHandler","a","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","res","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncAcyions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncActions","asyncTodolistsActions","forEach","todoListId","todolistsActions","todolistsAsyncActions","todolistsSlice","tasksActions","tasksAsyncActions","tasksSlice","tasksReducer","reducer","todolistsReducer","Task","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","key","className","style","position","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","allTodolistTasks","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","login","logout","setIsLoggedIn","authActions","authReducer","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","FormikHelpers","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","selectStatus","selectIsInitialaized","isInitialized","initializeApp","appReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d2af0a49.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title, {setError, setTitle});\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {useDispatch} from \"react-redux\";\r\nimport {AppDispatchType} from \"./types\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import axios from 'axios'\r\nimport {TaskType, TodolistType, UpdateTaskModelType, ResponseType, GetTasksResponse, LoginParamsType} from \"./types\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8d082859-ca9a-4da1-b0ef-8a94d073f65b'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return  instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return  instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me() {\r\n       return   instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}\r\n\r\n\r\n","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/app-reducer\";\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{ error: string | null }>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError,\r\n}","import {ResponseType} from '../api/types'\r\nimport {appActions} from \"../features/CommonActions/App\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: { message: string }, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application/app-reducer'\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AxiosError} from \"axios\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {TodolistType} from \"../../api/types\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists',\r\n    async (param, thunkAPI\r\n) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n       return  handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {\r\n    dispatch,\r\n}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue,\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, {dispatch, rejectWithValue}, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, {dispatch, rejectWithValue}, false)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n\r\n})\r\n\r\nexport const asyncAcyions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {\r\n    changeTodolistFilter, changeTodolistEntityStatus\r\n} = slice.actions\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/types\";\r\nimport {asyncAcyions as asyncTodolistsActions} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks: tasks, todolistId: todolistId}\r\n    } catch (err) {\r\n        return handleAsyncServerNetworkError(err as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param) => {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            }\r\n\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false);\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: {\r\n    taskId: string,\r\n    model: UpdateDomainTaskModelType,\r\n    todolistId: string\r\n}, {dispatch, getState, rejectWithValue}) => {\r\n\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleAsyncServerAppError(res.data, {dispatch, rejectWithValue});\r\n        }\r\n    } catch (error) {\r\n        handleAsyncServerNetworkError(error as AxiosError, {dispatch, rejectWithValue});\r\n    }\r\n\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask,\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload?.taskId)\r\n                    if (index > -1) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.model}\r\n                    }\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import {slice as tasksSlice, asyncActions as tasksAsyncActions} from \"./tasks-reducer\";\r\nimport {slice as todolistsSlice, asyncAcyions as todolistsAsyncActions} from './todolists-reducer'\r\nimport { TodolistsList } from \"./TodolistsList\";\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\n\r\nconst tasksReducer = tasksSlice.reducer\r\nconst todolistsReducer = todolistsSlice.reducer\r\n\r\nexport {\r\n    tasksReducer,\r\n    tasksActions,\r\n    todolistsReducer,\r\n    todolistsActions,\r\n    TodolistsList,\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {tasksActions} from \"../../index\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{position: 'absolute', top: '2px', right: '2px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n            style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {todolistsActions} from \"./index\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {TodolistDomainType} from \"./todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some errer occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport {appActions} from \"../../features/CommonActions/App\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: string[], fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleAsyncServerNetworkError(err as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout,\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Login } from './Login'\r\nimport * as authSelectors from './selectors'\r\nimport {asyncActions, slice} from \"./auth-reducer\";\r\n\r\nconst  authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions,\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormikValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormikValuesType, FormikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    FormikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialaized = (state: AppRootStateType) => state.app.isInitialized","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {authAPI} from '../../api/todolists-api'\r\nimport {setIsLoggedIn} from '../Auth/auth-reducer'\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}));\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions, slice} from \"./app-reducer\";\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions,\r\n}\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions,\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {Route} from 'react-router-dom'\r\nimport {Login} from '../features/Auth/Login'\r\nimport {selectIsInitialaized, selectStatus} from \"../features/Application/selectors\";\r\nimport {authActions, authSelectors} from \"../features/Auth\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions} from \"../features/Application\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialaized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {tasksReducer, todolistsReducer} from \"../features/TodolistsList\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}